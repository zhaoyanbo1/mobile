// grid布局 ********************************************
.grid {
    display: grid;
}

// 设置主轴方向 x y      grid-auto-flow: row; // row | column | row dense | column dense; 自动布局算法依次填充 往 行/列 方向
$direction: (
  // 行（默认值）
  'r': row,
  // 列
  'c': column,
  // dense：告诉自动布局算法在稍后出现较小的网格项时，尝试填充网格中较早的空缺
  'rd': row dense,
  'cd': column dense
);

$justify: (
  // 左侧对齐
  'start': start,
  // 水平居中对齐
  'center': center,
  // 右侧对齐
  'end': end,
  // 填满单元格的宽度（默认值）
  'stretch': stretch
);

$align: (
  // 顶部对齐
  'start': start,
  // 垂直居中对齐
  'center': center,
  // 底部对齐
  'end': flex-end,
  // 填满单元格的高度（默认值）
  'stretch': stretch
);

@each $alignKey, $alignVal in $align {
    @each $justifyKey, $justifyVal in $justify {
      @for $i from 2 through 3 {
        // grid-start-center-2
        .grid-#{$justifyKey}-#{$alignKey}-#{$i} {
          display: grid;
          // grid-gap: 10px; // 行、列间距  grid-gap: <grid-row-gap> <grid-column-gap>;
          justify-items: #{$justifyVal}; // start | end | center | stretch;
          align-items: #{$alignVal}; // start | end | center | stretch;
          grid-template-columns: repeat(#{$i}, 1fr); // 列大小 -- 划分份数
          grid-template-rows: min-content; // 行大小 -- 最小高度
        }
        // @each $directionKey, $directionVal in $direction { }
      }
    }
}

@for $i from 1 through 5 {
    // .grid-3
    .grid-#{$i} {
      display: grid;
      grid-template-columns: repeat(#{$i}, 1fr); // 列大小 -- 划分份数
    }
}

@for $i from 1 through 10 {
    // 如果能够被 2 整除，将应用以下样式
    @if ($i % 2 == 0) {
      // .grid-gap-10
      .grid-gap-#{$i} {
        grid-gap: #{$i}px; // 行、列间距  grid-gap: <grid-row-gap> <grid-column-gap>;
      }
    }
}